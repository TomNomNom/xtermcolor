package xtermcolor

// Xterm color codes vs. hex RGB; taken from https://gist.github.com/jasonm23/2868981
// There are duplicates in the list, the first best match will be used
var colors = []int{
	// Basic block
	0:  0x000000,
	1:  0x800000,
	2:  0x008000,
	3:  0x808000,
	4:  0x000080,
	5:  0x800080,
	6:  0x008080,
	7:  0xc0c0c0,
	8:  0x808080,
	9:  0xff0000,
	10: 0x00ff00,
	11: 0xffff00,
	12: 0x0000ff,
	13: 0xff00ff,
	14: 0x00ffff,
	15: 0xffffff,

	// 6x6x6 cube block
	16:  0x000000,
	17:  0x00005f,
	18:  0x000087,
	19:  0x0000af,
	20:  0x0000d7,
	21:  0x0000ff,
	22:  0x005f00,
	23:  0x005f5f,
	24:  0x005f87,
	25:  0x005faf,
	26:  0x005fd7,
	27:  0x005fff,
	28:  0x008700,
	29:  0x00875f,
	30:  0x008787,
	31:  0x0087af,
	32:  0x0087d7,
	33:  0x0087ff,
	34:  0x00af00,
	35:  0x00af5f,
	36:  0x00af87,
	37:  0x00afaf,
	38:  0x00afd7,
	39:  0x00afff,
	40:  0x00d700,
	41:  0x00d75f,
	42:  0x00d787,
	43:  0x00d7af,
	44:  0x00d7d7,
	45:  0x00d7ff,
	46:  0x00ff00,
	47:  0x00ff5f,
	48:  0x00ff87,
	49:  0x00ffaf,
	50:  0x00ffd7,
	51:  0x00ffff,
	82:  0x5fff00,
	83:  0x5fff5f,
	84:  0x5fff87,
	85:  0x5fffaf,
	86:  0x5fffd7,
	87:  0x5fffff,
	76:  0x5fd700,
	77:  0x5fd75f,
	78:  0x5fd787,
	79:  0x5fd7af,
	80:  0x5fd7d7,
	81:  0x5fd7ff,
	70:  0x5faf00,
	71:  0x5faf5f,
	72:  0x5faf87,
	73:  0x5fafaf,
	74:  0x5fafd7,
	75:  0x5fafff,
	64:  0x5f8700,
	65:  0x5f875f,
	66:  0x5f8787,
	67:  0x5f87af,
	68:  0x5f87d7,
	69:  0x5f87ff,
	58:  0x5f5f00,
	59:  0x5f5f5f,
	60:  0x5f5f87,
	61:  0x5f5faf,
	62:  0x5f5fd7,
	63:  0x5f5fff,
	52:  0x5f0000,
	53:  0x5f005f,
	54:  0x5f0087,
	55:  0x5f00af,
	56:  0x5f00d7,
	57:  0x5f00ff,
	93:  0x8700ff,
	92:  0x8700d7,
	91:  0x8700af,
	90:  0x870087,
	89:  0x87005f,
	88:  0x870000,
	99:  0x875fff,
	98:  0x875fd7,
	97:  0x875faf,
	96:  0x875f87,
	95:  0x875f5f,
	94:  0x875f00,
	105: 0x8787ff,
	104: 0x8787d7,
	103: 0x8787af,
	102: 0x878787,
	101: 0x87875f,
	100: 0x878700,
	111: 0x87afff,
	110: 0x87afd7,
	109: 0x87afaf,
	108: 0x87af87,
	107: 0x87af5f,
	106: 0x87af00,
	117: 0x87d7ff,
	116: 0x87d7d7,
	115: 0x87d7af,
	114: 0x87d787,
	113: 0x87d75f,
	112: 0x87d700,
	123: 0x87ffff,
	122: 0x87ffd7,
	121: 0x87ffaf,
	120: 0x87ff87,
	119: 0x87ff5f,
	118: 0x87ff00,
	159: 0xafffff,
	158: 0xafffd7,
	157: 0xafffaf,
	156: 0xafff87,
	155: 0xafff5f,
	154: 0xafff00,
	153: 0xafd7ff,
	152: 0xafd7d7,
	151: 0xafd7af,
	150: 0xafd787,
	149: 0xafd75f,
	148: 0xafd700,
	147: 0xafafff,
	146: 0xafafd7,
	145: 0xafafaf,
	144: 0xafaf87,
	143: 0xafaf5f,
	142: 0xafaf00,
	141: 0xaf87ff,
	140: 0xaf87d7,
	139: 0xaf87af,
	138: 0xaf8787,
	137: 0xaf875f,
	136: 0xaf8700,
	135: 0xaf5fff,
	134: 0xaf5fd7,
	133: 0xaf5faf,
	132: 0xaf5f87,
	131: 0xaf5f5f,
	130: 0xaf5f00,
	129: 0xaf00ff,
	128: 0xaf00d7,
	127: 0xaf00af,
	126: 0xaf0087,
	125: 0xaf005f,
	124: 0xaf0000,
	160: 0xd70000,
	161: 0xd7005f,
	162: 0xd70087,
	163: 0xd700af,
	164: 0xd700d7,
	165: 0xd700ff,
	166: 0xd75f00,
	167: 0xd75f5f,
	168: 0xd75f87,
	169: 0xd75faf,
	170: 0xd75fd7,
	171: 0xd75fff,
	172: 0xd78700,
	173: 0xd7875f,
	174: 0xd78787,
	175: 0xd787af,
	176: 0xd787d7,
	177: 0xd787ff,
	178: 0xdfaf00,
	179: 0xdfaf5f,
	180: 0xdfaf87,
	181: 0xdfafaf,
	182: 0xdfafdf,
	183: 0xdfafff,
	184: 0xdfdf00,
	185: 0xdfdf5f,
	186: 0xdfdf87,
	187: 0xdfdfaf,
	188: 0xdfdfdf,
	189: 0xdfdfff,
	190: 0xdfff00,
	191: 0xdfff5f,
	192: 0xdfff87,
	193: 0xdfffaf,
	194: 0xdfffdf,
	195: 0xdfffff,
	226: 0xffff00,
	227: 0xffff5f,
	228: 0xffff87,
	229: 0xffffaf,
	230: 0xffffdf,
	231: 0xffffff,
	220: 0xffdf00,
	221: 0xffdf5f,
	222: 0xffdf87,
	223: 0xffdfaf,
	224: 0xffdfdf,
	225: 0xffdfff,
	214: 0xffaf00,
	215: 0xffaf5f,
	216: 0xffaf87,
	217: 0xffafaf,
	218: 0xffafdf,
	219: 0xffafff,
	208: 0xff8700,
	209: 0xff875f,
	210: 0xff8787,
	211: 0xff87af,
	212: 0xff87df,
	213: 0xff87ff,
	202: 0xff5f00,
	203: 0xff5f5f,
	204: 0xff5f87,
	205: 0xff5faf,
	206: 0xff5fdf,
	207: 0xff5fff,
	196: 0xff0000,
	197: 0xff005f,
	198: 0xff0087,
	199: 0xff00af,
	200: 0xff00df,
	201: 0xff00ff,

	// Grayscale block
	232: 0x080808,
	233: 0x121212,
	234: 0x1c1c1c,
	235: 0x262626,
	236: 0x303030,
	237: 0x3a3a3a,
	238: 0x444444,
	239: 0x4e4e4e,
	240: 0x585858,
	241: 0x626262,
	242: 0x6c6c6c,
	243: 0x767676,
	255: 0xeeeeee,
	254: 0xe4e4e4,
	253: 0xdadada,
	252: 0xd0d0d0,
	251: 0xc6c6c6,
	250: 0xbcbcbc,
	249: 0xb2b2b2,
	248: 0xa8a8a8,
	247: 0x9e9e9e,
	246: 0x949494,
	245: 0x8a8a8a,
	244: 0x808080,
}

// Convert a 24 bit color to R, G and B components
func intToRGB(c int) (r int, g int, b int) {
	r = (c >> 16) & 0xff
	g = (c >> 8) & 0xff
	b = c & 0xff
	return
}

// Find the closest xterm color to a given 24 bit color (e.g. 0xff00ff)
func FromInt(target int) int {
	return FromRGB(intToRGB(target))
}

// Find the closest xterm colour to given R, G and B components (e.g. 255, 0, 255)
// Where there are multiple colors with equal distance, the first one found will be returned
func FromRGB(tr, tg, tb int) int {
	// Max possible distance between target and match
	distance := 0xffffff
	var match int

	for xtermCode, candidate := range colors {
		// Get candidate components
		cr, cg, cb := intToRGB(candidate)

		// Distance to each component
		// DistanceRed = TargetRed - CandidateRed etc
		dr := tr - cr
		dg := tg - cg
		db := tb - cb

		// Total candidate distance (pythag)
		cd := dr*dr + dg*dg + db*db

		if cd < distance {
			// Found a candidate closer to the target
			match = xtermCode
			distance = cd
		}
	}

	return match
}
